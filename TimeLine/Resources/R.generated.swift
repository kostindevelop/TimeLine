//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// Base translation: Login
      /// 
      /// Locales: Base, en, ru
      static let authBtLogin = Rswift.StringResource(key: "auth.btLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en", "ru"], comment: nil)
      /// Base translation: Registration
      /// 
      /// Locales: Base, en, ru
      static let authBtRegistration = Rswift.StringResource(key: "auth.btRegistration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en", "ru"], comment: nil)
      /// Base translation: SignIn
      /// 
      /// Locales: Base, en, ru
      static let authLbSignIn = Rswift.StringResource(key: "auth.lbSignIn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en", "ru"], comment: nil)
      /// Base translation: forgot password?
      /// 
      /// Locales: Base, en, ru
      static let authBtForgotPassword = Rswift.StringResource(key: "auth.btForgotPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en", "ru"], comment: nil)
      /// Base translation: password
      /// 
      /// Locales: Base, en, ru
      static let authPassword = Rswift.StringResource(key: "auth.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en", "ru"], comment: nil)
      /// Base translation: user name
      /// 
      /// Locales: Base, en, ru
      static let authLbUserName = Rswift.StringResource(key: "auth.lbUserName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en", "ru"], comment: nil)
      
      /// Base translation: Login
      /// 
      /// Locales: Base, en, ru
      static func authBtLogin(_: Void = ()) -> String {
        return NSLocalizedString("auth.btLogin", bundle: R.hostingBundle, value: "Login", comment: "")
      }
      
      /// Base translation: Registration
      /// 
      /// Locales: Base, en, ru
      static func authBtRegistration(_: Void = ()) -> String {
        return NSLocalizedString("auth.btRegistration", bundle: R.hostingBundle, value: "Registration", comment: "")
      }
      
      /// Base translation: SignIn
      /// 
      /// Locales: Base, en, ru
      static func authLbSignIn(_: Void = ()) -> String {
        return NSLocalizedString("auth.lbSignIn", bundle: R.hostingBundle, value: "SignIn", comment: "")
      }
      
      /// Base translation: forgot password?
      /// 
      /// Locales: Base, en, ru
      static func authBtForgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("auth.btForgotPassword", bundle: R.hostingBundle, value: "forgot password?", comment: "")
      }
      
      /// Base translation: password
      /// 
      /// Locales: Base, en, ru
      static func authPassword(_: Void = ()) -> String {
        return NSLocalizedString("auth.password", bundle: R.hostingBundle, value: "password", comment: "")
      }
      
      /// Base translation: user name
      /// 
      /// Locales: Base, en, ru
      static func authLbUserName(_: Void = ()) -> String {
        return NSLocalizedString("auth.lbUserName", bundle: R.hostingBundle, value: "user name", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct auth: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = LoginScreen
      
      let bundle = R.hostingBundle
      let name = "Auth"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
